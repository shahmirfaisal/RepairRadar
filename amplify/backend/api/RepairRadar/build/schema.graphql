type Message @aws_iam @aws_api_key {
  id: ID!
  text: String!
  Sender: User
  Chat: Chat
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  messageSenderId: ID
  messageChatId: ID
}

type Chat @aws_iam @aws_api_key {
  id: ID!
  Customer: User
  Mechanic: User
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  chatCustomerId: ID
  chatMechanicId: ID
}

type Review @aws_iam @aws_api_key {
  id: ID!
  Customer: User
  Mechanic: User
  rating: Float!
  text: String!
  Appointment: Appointment
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  reviewCustomerId: ID
  reviewMechanicId: ID
  reviewAppointmentId: ID
}

type Appointment @aws_iam @aws_api_key {
  id: ID!
  Customer: User
  Mechanic: User
  time: AWSDateTime!
  status: String!
  description: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  appointmentCustomerId: ID
  appointmentMechanicId: ID
}

type User @aws_iam @aws_api_key {
  id: ID!
  userId: ID!
  name: String!
  email: String!
  type: String!
  picture: String
  latitude: String
  longitude: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelMessageConnection @aws_api_key @aws_iam {
  items: [Message]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelMessageFilterInput {
  id: ModelIDInput
  text: ModelStringInput
  and: [ModelMessageFilterInput]
  or: [ModelMessageFilterInput]
  not: ModelMessageFilterInput
  _deleted: ModelBooleanInput
  messageSenderId: ModelIDInput
  messageChatId: ModelIDInput
}

type Query {
  getMessage(id: ID!): Message @aws_api_key @aws_iam
  listMessages(filter: ModelMessageFilterInput, limit: Int, nextToken: String): ModelMessageConnection @aws_api_key @aws_iam
  syncMessages(filter: ModelMessageFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelMessageConnection @aws_api_key @aws_iam
  getChat(id: ID!): Chat @aws_api_key @aws_iam
  listChats(filter: ModelChatFilterInput, limit: Int, nextToken: String): ModelChatConnection @aws_api_key @aws_iam
  syncChats(filter: ModelChatFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelChatConnection @aws_api_key @aws_iam
  getReview(id: ID!): Review @aws_api_key @aws_iam
  listReviews(filter: ModelReviewFilterInput, limit: Int, nextToken: String): ModelReviewConnection @aws_api_key @aws_iam
  syncReviews(filter: ModelReviewFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelReviewConnection @aws_api_key @aws_iam
  getAppointment(id: ID!): Appointment @aws_api_key @aws_iam
  listAppointments(filter: ModelAppointmentFilterInput, limit: Int, nextToken: String): ModelAppointmentConnection @aws_api_key @aws_iam
  syncAppointments(filter: ModelAppointmentFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelAppointmentConnection @aws_api_key @aws_iam
  getUser(id: ID!): User @aws_api_key @aws_iam
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection @aws_api_key @aws_iam
  syncUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelUserConnection @aws_api_key @aws_iam
}

input ModelMessageConditionInput {
  text: ModelStringInput
  and: [ModelMessageConditionInput]
  or: [ModelMessageConditionInput]
  not: ModelMessageConditionInput
  _deleted: ModelBooleanInput
  messageSenderId: ModelIDInput
  messageChatId: ModelIDInput
}

input CreateMessageInput {
  id: ID
  text: String!
  _version: Int
  messageSenderId: ID
  messageChatId: ID
}

input UpdateMessageInput {
  id: ID!
  text: String
  _version: Int
  messageSenderId: ID
  messageChatId: ID
}

input DeleteMessageInput {
  id: ID!
  _version: Int
}

type Mutation {
  createMessage(input: CreateMessageInput!, condition: ModelMessageConditionInput): Message @aws_api_key @aws_iam
  updateMessage(input: UpdateMessageInput!, condition: ModelMessageConditionInput): Message @aws_api_key @aws_iam
  deleteMessage(input: DeleteMessageInput!, condition: ModelMessageConditionInput): Message @aws_api_key @aws_iam
  createChat(input: CreateChatInput!, condition: ModelChatConditionInput): Chat @aws_api_key @aws_iam
  updateChat(input: UpdateChatInput!, condition: ModelChatConditionInput): Chat @aws_api_key @aws_iam
  deleteChat(input: DeleteChatInput!, condition: ModelChatConditionInput): Chat @aws_api_key @aws_iam
  createReview(input: CreateReviewInput!, condition: ModelReviewConditionInput): Review @aws_api_key @aws_iam
  updateReview(input: UpdateReviewInput!, condition: ModelReviewConditionInput): Review @aws_api_key @aws_iam
  deleteReview(input: DeleteReviewInput!, condition: ModelReviewConditionInput): Review @aws_api_key @aws_iam
  createAppointment(input: CreateAppointmentInput!, condition: ModelAppointmentConditionInput): Appointment @aws_api_key @aws_iam
  updateAppointment(input: UpdateAppointmentInput!, condition: ModelAppointmentConditionInput): Appointment @aws_api_key @aws_iam
  deleteAppointment(input: DeleteAppointmentInput!, condition: ModelAppointmentConditionInput): Appointment @aws_api_key @aws_iam
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
}

input ModelSubscriptionMessageFilterInput {
  id: ModelSubscriptionIDInput
  text: ModelSubscriptionStringInput
  and: [ModelSubscriptionMessageFilterInput]
  or: [ModelSubscriptionMessageFilterInput]
  _deleted: ModelBooleanInput
}

type Subscription {
  onCreateMessage(filter: ModelSubscriptionMessageFilterInput): Message @aws_subscribe(mutations: ["createMessage"]) @aws_api_key @aws_iam
  onUpdateMessage(filter: ModelSubscriptionMessageFilterInput): Message @aws_subscribe(mutations: ["updateMessage"]) @aws_api_key @aws_iam
  onDeleteMessage(filter: ModelSubscriptionMessageFilterInput): Message @aws_subscribe(mutations: ["deleteMessage"]) @aws_api_key @aws_iam
  onCreateChat(filter: ModelSubscriptionChatFilterInput): Chat @aws_subscribe(mutations: ["createChat"]) @aws_api_key @aws_iam
  onUpdateChat(filter: ModelSubscriptionChatFilterInput): Chat @aws_subscribe(mutations: ["updateChat"]) @aws_api_key @aws_iam
  onDeleteChat(filter: ModelSubscriptionChatFilterInput): Chat @aws_subscribe(mutations: ["deleteChat"]) @aws_api_key @aws_iam
  onCreateReview(filter: ModelSubscriptionReviewFilterInput): Review @aws_subscribe(mutations: ["createReview"]) @aws_api_key @aws_iam
  onUpdateReview(filter: ModelSubscriptionReviewFilterInput): Review @aws_subscribe(mutations: ["updateReview"]) @aws_api_key @aws_iam
  onDeleteReview(filter: ModelSubscriptionReviewFilterInput): Review @aws_subscribe(mutations: ["deleteReview"]) @aws_api_key @aws_iam
  onCreateAppointment(filter: ModelSubscriptionAppointmentFilterInput): Appointment @aws_subscribe(mutations: ["createAppointment"]) @aws_api_key @aws_iam
  onUpdateAppointment(filter: ModelSubscriptionAppointmentFilterInput): Appointment @aws_subscribe(mutations: ["updateAppointment"]) @aws_api_key @aws_iam
  onDeleteAppointment(filter: ModelSubscriptionAppointmentFilterInput): Appointment @aws_subscribe(mutations: ["deleteAppointment"]) @aws_api_key @aws_iam
  onCreateUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations: ["createUser"]) @aws_api_key @aws_iam
  onUpdateUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations: ["updateUser"]) @aws_api_key @aws_iam
  onDeleteUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations: ["deleteUser"]) @aws_api_key @aws_iam
}

type ModelChatConnection @aws_api_key @aws_iam {
  items: [Chat]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelChatFilterInput {
  id: ModelIDInput
  and: [ModelChatFilterInput]
  or: [ModelChatFilterInput]
  not: ModelChatFilterInput
  _deleted: ModelBooleanInput
  chatCustomerId: ModelIDInput
  chatMechanicId: ModelIDInput
}

input ModelChatConditionInput {
  and: [ModelChatConditionInput]
  or: [ModelChatConditionInput]
  not: ModelChatConditionInput
  _deleted: ModelBooleanInput
  chatCustomerId: ModelIDInput
  chatMechanicId: ModelIDInput
}

input CreateChatInput {
  id: ID
  _version: Int
  chatCustomerId: ID
  chatMechanicId: ID
}

input UpdateChatInput {
  id: ID!
  _version: Int
  chatCustomerId: ID
  chatMechanicId: ID
}

input DeleteChatInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionChatFilterInput {
  id: ModelSubscriptionIDInput
  and: [ModelSubscriptionChatFilterInput]
  or: [ModelSubscriptionChatFilterInput]
  _deleted: ModelBooleanInput
}

type ModelReviewConnection @aws_api_key @aws_iam {
  items: [Review]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelReviewFilterInput {
  id: ModelIDInput
  rating: ModelFloatInput
  text: ModelStringInput
  and: [ModelReviewFilterInput]
  or: [ModelReviewFilterInput]
  not: ModelReviewFilterInput
  _deleted: ModelBooleanInput
  reviewCustomerId: ModelIDInput
  reviewMechanicId: ModelIDInput
  reviewAppointmentId: ModelIDInput
}

input ModelReviewConditionInput {
  rating: ModelFloatInput
  text: ModelStringInput
  and: [ModelReviewConditionInput]
  or: [ModelReviewConditionInput]
  not: ModelReviewConditionInput
  _deleted: ModelBooleanInput
  reviewCustomerId: ModelIDInput
  reviewMechanicId: ModelIDInput
  reviewAppointmentId: ModelIDInput
}

input CreateReviewInput {
  id: ID
  rating: Float!
  text: String!
  _version: Int
  reviewCustomerId: ID
  reviewMechanicId: ID
  reviewAppointmentId: ID
}

input UpdateReviewInput {
  id: ID!
  rating: Float
  text: String
  _version: Int
  reviewCustomerId: ID
  reviewMechanicId: ID
  reviewAppointmentId: ID
}

input DeleteReviewInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionReviewFilterInput {
  id: ModelSubscriptionIDInput
  rating: ModelSubscriptionFloatInput
  text: ModelSubscriptionStringInput
  and: [ModelSubscriptionReviewFilterInput]
  or: [ModelSubscriptionReviewFilterInput]
  _deleted: ModelBooleanInput
}

type ModelAppointmentConnection @aws_api_key @aws_iam {
  items: [Appointment]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelAppointmentFilterInput {
  id: ModelIDInput
  time: ModelStringInput
  status: ModelStringInput
  description: ModelStringInput
  and: [ModelAppointmentFilterInput]
  or: [ModelAppointmentFilterInput]
  not: ModelAppointmentFilterInput
  _deleted: ModelBooleanInput
  appointmentCustomerId: ModelIDInput
  appointmentMechanicId: ModelIDInput
}

input ModelAppointmentConditionInput {
  time: ModelStringInput
  status: ModelStringInput
  description: ModelStringInput
  and: [ModelAppointmentConditionInput]
  or: [ModelAppointmentConditionInput]
  not: ModelAppointmentConditionInput
  _deleted: ModelBooleanInput
  appointmentCustomerId: ModelIDInput
  appointmentMechanicId: ModelIDInput
}

input CreateAppointmentInput {
  id: ID
  time: AWSDateTime!
  status: String!
  description: String!
  _version: Int
  appointmentCustomerId: ID
  appointmentMechanicId: ID
}

input UpdateAppointmentInput {
  id: ID!
  time: AWSDateTime
  status: String
  description: String
  _version: Int
  appointmentCustomerId: ID
  appointmentMechanicId: ID
}

input DeleteAppointmentInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionAppointmentFilterInput {
  id: ModelSubscriptionIDInput
  time: ModelSubscriptionStringInput
  status: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  and: [ModelSubscriptionAppointmentFilterInput]
  or: [ModelSubscriptionAppointmentFilterInput]
  _deleted: ModelBooleanInput
}

type ModelUserConnection @aws_api_key @aws_iam {
  items: [User]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelUserFilterInput {
  id: ModelIDInput
  userId: ModelIDInput
  name: ModelStringInput
  email: ModelStringInput
  type: ModelStringInput
  picture: ModelStringInput
  latitude: ModelStringInput
  longitude: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
  _deleted: ModelBooleanInput
}

input ModelUserConditionInput {
  userId: ModelIDInput
  name: ModelStringInput
  email: ModelStringInput
  type: ModelStringInput
  picture: ModelStringInput
  latitude: ModelStringInput
  longitude: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
  _deleted: ModelBooleanInput
}

input CreateUserInput {
  id: ID
  userId: ID!
  name: String!
  email: String!
  type: String!
  picture: String
  latitude: String
  longitude: String
  _version: Int
}

input UpdateUserInput {
  id: ID!
  userId: ID
  name: String
  email: String
  type: String
  picture: String
  latitude: String
  longitude: String
  _version: Int
}

input DeleteUserInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionUserFilterInput {
  id: ModelSubscriptionIDInput
  userId: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  email: ModelSubscriptionStringInput
  type: ModelSubscriptionStringInput
  picture: ModelSubscriptionStringInput
  latitude: ModelSubscriptionStringInput
  longitude: ModelSubscriptionStringInput
  and: [ModelSubscriptionUserFilterInput]
  or: [ModelSubscriptionUserFilterInput]
  _deleted: ModelBooleanInput
}
